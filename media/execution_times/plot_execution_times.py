# This script was run on local machine with
# $ python3 plotit.py
# Not in the Docker enviroment

from matplotlib import pyplot as plt
import numpy as np

scales = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15.675,15.7,16,16.4,17,18,19,20])

# [2020-08-19] [c526379] | Analyzes at layerHeight intervals
times = np.array([[0.874, 0.878, 0.880, 0.878, 0.832, 0.844],
                  [1.155, 1.149, 1.203, 1.148, 1.195, 1.206],
                  [1.591, 1.556, 1.551, 1.590, 1.599, 1.599],
                  [1.971, 1.998, 2.007, 1.989, 1.962, 1.959],
                  [2.363, 2.350, 2.403, 2.382, 2.339, 2.370],
                  [2.761, 2.755, 2.768, 2.756, 2.752, 2.767],
                  [3.208, 3.135, 3.166, 3.259, 3.153, 3.209],
                  [3.572, 3.559, 3.664, 3.569, 3.597, 3.555],
                  [4.004, 3.964, 4.017, 3.956, 3.996, 4.016],
                  [4.373, 4.378, 4.409, 4.373, 4.376, 4.396],
                  [4.768, 4.763, 4.831, 4.775, 4.813, 4.769],
                  [5.174, 5.174, 5.175, 5.151, 5.166, 5.211],
                  [5.608, 5.620, 5.540, 5.631, 5.568, 5.583],
                  [6.301, 5.949, 6.023, 5.966, 5.942, 6.016],
                  [6.492, 6.503, 6.489, 6.501, 6.444, 6.504],
                  [6.801, 6.786, 6.773, 6.751, 6.836, 6.861],
                  [2.483, 2.351, 2.439, 2.359, 2.346, 2.338],
                  [0.741, 0.767, 0.769, 0.750, 0.762, 0.766],
                  [0.557, 0.548, 0.533, 0.549, 0.551, 0.550],
                  [0.561, 0.524, 0.569, 0.527, 0.546, 0.573],
                  [0.523, 0.521, 0.518, 0.527, 0.522, 0.535],
                  [0.578, 0.557, 0.592, 0.560, 0.548, 0.559],
                  [0.643, 0.666, 0.696, 0.694, 0.714, 0.689]
                  ])

# [2020-08-19] [e3a60a1] | Makes Edge.m_users list an array instead of vector
times2 = np.array([[0.998, 0.993, 0.997, 1.002, 0.995, 0.999],
                   [1.433, 1.425, 1.435, 1.427, 1.425, 1.422],
                   [2.454, 2.492, 2.433, 2.451, 2.502, 2.446],
                   [2.481, 2.498, 2.504, 2.450, 2.442, 2.495],
                   [2.536, 2.500, 2.494, 2.440, 2.488, 2.447],
                   [4.642, 4.561, 4.570, 4.555, 4.611, 4.565],
                   [4.643, 4.611, 4.554, 4.557, 4.609, 4.557],
                   [4.640, 4.609, 4.610, 4.660, 4.614, 4.611],
                   [4.654, 4.616, 4.609, 4.608, 4.619, 4.567],
                   [4.602, 4.609, 4.659, 4.619, 4.607, 4.560],
                   [8.872, 8.829, 8.892, 8.830, 8.853, 8.826],
                   [8.824, 8.894, 8.864, 8.872, 8.843, 8.836],
                   [8.936, 8.883, 8.818, 8.818, 8.875, 8.808],
                   [8.861, 8.876, 8.841, 8.851, 8.872, 8.883],
                   [8.970, 8.986, 8.915, 8.924, 8.941, 8.943],
                   [9.001, 8.979, 9.031, 9.057, 8.943, 9.082],
                   [2.346, 2.373, 2.364, 2.371, 2.350, 2.369],
                   [0.774, 0.749, 0.757, 0.772, 0.731, 0.748],
                   [0.553, 0.543, 0.546, 0.549, 0.544, 0.544],
                   [0.598, 0.570, 0.565, 0.522, 0.567, 0.549],
                   [0.554, 0.521, 0.519, 0.519, 0.524, 0.516],
                   [0.591, 0.560, 0.558, 0.538, 0.581, 0.558],
                   [0.670, 0.687, 0.691, 0.662, 0.692, 0.690]])

# [2020-08-19] [f0a653c] | Speeds up Mesh::reset function
times3 = np.array([[1.268, 1.253, 1.255, 1.254, 1.258, 1.256],
                   [1.845, 1.786, 1.735, 1.768, 1.779, 1.780],
                   [2.991, 3.297, 2.972, 2.962, 2.962, 2.963],
                   [2.990, 2.959, 2.958, 2.995, 2.993, 2.956],
                   [3.020, 2.965, 2.955, 2.960, 2.957, 2.953],
                   [5.400, 5.423, 5.365, 5.378, 5.335, 5.377],
                   [5.428, 5.423, 5.360, 5.383, 5.372, 5.374],
                   [5.421, 5.370, 5.365, 5.387, 5.369, 5.382],
                   [5.421, 5.392, 5.374, 5.348, 5.375, 5.371],
                   [5.414, 5.360, 5.410, 5.408, 5.376, 5.391],
                   [10.240, 10.185, 10.191, 10.225, 10.190, 10.223],
                   [10.226, 10.185, 10.193, 10.193, 10.204, 10.195],
                   [10.272, 10.260, 10.207, 10.247, 10.189, 10.237],
                   [10.234, 10.209, 10.240, 10.299, 10.244, 10.286],
                   [10.404, 10.339, 10.343, 10.446, 10.344, 10.397],
                   [10.491, 10.456, 10.396, 10.344, 10.391, 10.321],
                   [2.897, 2.842, 2.850, 2.825, 2.931, 2.873],
                   [1.061, 1.048, 1.049, 1.029, 1.010, 1.041],
                   [0.840, 0.811, 0.791, 0.809, 0.808, 0.808],
                   [0.869, 0.831, 0.807, 0.796, 0.810, 0.808],
                   [0.751, 0.733, 0.730, 0.729, 0.719, 0.716],
                   [0.810, 0.770, 0.795, 0.773, 0.793, 0.769],
                   [0.921, 0.830, 0.888, 0.882, 0.842, 0.832]])

# [2020-08-19] [607fea8] | Moves triangle visibility out of Triangle class
times4 = np.array([[1.298, 1.246, 1.300, 1.303, 1.246, 1.304],
                   [1.792, 1.758, 1.752, 1.806, 1.808, 1.758],
                   [3.058, 3.017, 3.014, 3.026, 2.977, 3.005],
                   [3.008, 2.990, 2.971, 2.977, 2.985, 3.082],
                   [3.048, 3.008, 3.022, 3.013, 3.020, 3.019],
                   [5.464, 5.445, 5.497, 5.462, 5.421, 5.417],
                   [5.526, 5.457, 5.458, 5.471, 5.478, 5.442],
                   [5.517, 5.474, 5.473, 5.487, 5.470, 5.469],
                   [5.508, 5.459, 5.457, 5.492, 5.481, 5.501],
                   [5.541, 5.469, 5.493, 5.418, 5.456, 5.453],
                   [10.424, 10.293, 10.347, 10.380, 10.389, 10.368],
                   [10.432, 10.359, 10.351, 10.385, 10.360, 10.382],
                   [10.393, 10.397, 10.442, 10.337, 10.353, 10.438],
                   [10.439, 10.618, 10.491, 10.442, 10.387, 10.407],
                   [10.603, 10.562, 10.485, 10.520, 10.474, 10.538],
                   [10.678, 10.592, 10.586, 10.585, 10.534, 10.592],
                   [2.999, 2.943, 2.961, 2.958, 2.936, 2.930],
                   [1.063, 1.018, 1.051, 1.019, 1.018, 1.018],
                   [0.853, 0.779, 0.781, 0.782, 0.795, 0.806],
                   [0.849, 0.805, 0.801, 0.810, 0.806, 0.816],
                   [0.789, 0.747, 0.731, 0.720, 0.731, 0.719],
                   [0.837, 0.781, 0.777, 0.789, 0.797, 0.776],
                   [0.842, 0.829, 0.883, 0.887, 0.887, 0.866]])

# [2020-08-18] [015dc8f] | Copies only Mesh elements that changed
times5 = np.array([[1.341, 1.300, 1.304, 1.315, 1.306, 1.433],
                   [2.346, 1.861, 1.859, 1.862, 1.872, 1.863],
                   [3.214, 3.135, 3.133, 3.182, 3.140, 3.168],
                   [3.221, 3.131, 3.139, 3.163, 3.134, 3.143],
                   [3.180, 3.182, 3.134, 3.159, 3.156, 3.179],
                   [5.796, 5.762, 5.756, 5.775, 5.743, 5.821],
                   [5.807, 5.772, 5.777, 5.775, 5.770, 5.805],
                   [5.809, 5.806, 5.761, 5.771, 5.773, 5.774],
                   [5.851, 5.773, 5.766, 5.824, 5.770, 5.824],
                   [5.816, 5.770, 5.799, 5.818, 5.738, 5.775],
                   [11.007, 10.970, 10.941, 11.002, 10.991, 11.124],
                   [10.997, 10.984, 10.993, 10.995, 11.000, 10.947],
                   [11.023, 11.094, 11.020, 10.937, 11.044, 11.028],
                   [11.040, 11.055, 11.046, 11.046, 11.052, 11.056],
                   [11.243, 11.130, 11.324, 11.238, 11.142, 11.235],
                   [11.178, 11.181, 11.243, 11.213, 11.194, 11.168],
                   [3.121, 3.105, 3.061, 3.028, 3.085, 3.012],
                   [1.051, 1.007, 1.044, 1.024, 1.023, 1.133],
                   [0.829, 0.788, 0.793, 0.794, 0.790, 0.794],
                   [0.841, 0.806, 0.811, 0.811, 0.803, 0.804],
                   [0.762, 0.713, 0.740, 0.726, 0.722, 0.722],
                   [0.816, 0.808, 0.802, 0.773, 0.804, 0.776],
                   [0.855, 0.840, 0.896, 0.898, 0.899, 0.902]])

# [2020-08-18] [e8b9de2] | Don't reload points on every iteration
times6 = np.array([[1.891, 1.851, 1.841, 1.842, 1.847, 1.884],
                   [3.008, 2.981, 2.956, 2.965, 2.938, 2.942],
                   [5.445, 5.453, 5.420, 5.380, 5.417, 5.374],
                   [5.430, 5.426, 5.388, 5.412, 5.386, 5.438],
                   [5.426, 5.420, 5.434, 5.418, 5.416, 5.400],
                   [10.451, 10.502, 10.422, 10.435, 10.386, 10.504],
                   [10.452, 10.529, 10.438, 10.494, 10.426, 10.488],
                   [10.414, 10.490, 10.436, 10.436, 10.439, 10.437],
                   [10.476, 10.451, 10.485, 10.467, 10.440, 10.440],
                   [10.452, 10.453, 10.389, 10.449, 10.461, 10.536],
                   [20.821, 20.927, 20.777, 20.984, 20.947, 20.588],
                   [20.856, 20.901, 20.911, 21.024, 21.034, 20.974],
                   [21.086, 21.046, 21.019, 21.083, 20.953, 21.105],
                   [21.093, 21.092, 21.014, 20.934, 21.079, 21.145],
                   [21.264, 21.203, 20.716, 21.551, 21.387, 21.330],
                   [21.249, 21.622, 21.399, 21.331, 21.428, 21.669],
                   [5.388, 5.189, 5.244, 5.378, 5.186, 5.281],
                   [1.478, 1.359, 1.399, 1.442, 1.388, 1.464],
                   [0.879, 0.869, 0.866, 0.883, 0.935, 0.872],
                   [0.914, 0.914, 0.911, 0.844, 0.850, 0.842],
                   [0.746, 0.736, 0.738, 0.765, 0.792, 0.723],
                   [0.805, 0.785, 0.780, 0.742, 0.788, 0.747],
                   [0.870, 0.873, 0.887, 0.891, 0.844, 0.894]])

# [2020-08-18] [7019380] | Moves MeshClipper's vector memory management
times7 = np.array([[1.885, 1.851, 1.897, 1.848, 1.850, 1.850],
                   [3.047, 3.006, 3.008, 3.007, 3.005, 3.013],
                   [5.551, 5.509, 5.515, 5.543, 5.521, 5.514],
                   [5.604, 5.504, 5.514, 5.513, 5.566, 5.461],
                   [5.551, 5.480, 5.514, 5.538, 5.565, 5.508],
                   [10.689, 10.687, 10.687, 10.737, 10.635, 10.655],
                   [10.721, 10.734, 10.637, 10.736, 10.691, 10.704],
                   [10.745, 10.673, 10.686, 10.695, 10.685, 10.684],
                   [10.721, 10.681, 10.686, 10.703, 10.623, 10.634],
                   [10.723, 10.631, 10.636, 10.733, 10.694, 10.703],
                   [21.256, 21.303, 21.322, 21.250, 21.401, 21.322],
                   [21.410, 21.382, 21.491, 21.473, 21.486, 21.408],
                   [21.430, 21.476, 21.388, 21.470, 21.462, 21.477],
                   [21.555, 21.410, 21.506, 21.434, 21.532, 21.574],
                   [21.722, 21.545, 21.619, 21.633, 21.665, 21.889],
                   [21.663, 21.860, 21.653, 21.643, 21.713, 21.712],
                   [5.471, 5.333, 5.494, 5.326, 5.174, 5.246],
                   [1.439, 1.325, 1.388, 1.365, 1.393, 1.456],
                   [0.944, 0.864, 0.886, 0.925, 0.863, 0.861],
                   [0.880, 0.840, 0.882, 0.839, 0.932, 0.938],
                   [0.760, 0.715, 0.735, 0.751, 0.783, 0.716],
                   [0.832, 0.737, 0.781, 0.799, 0.794, 0.737],
                   [0.901, 0.928, 0.888, 0.892, 0.868, 0.892]])

# [2020-08-17] [30fa8b5] | Returns indicies of open to fix from adjustEdges
times8 = np.array([[2.062, 2.036, 2.049, 2.101, 2.053, 2.042],
                   [3.343, 3.359, 3.345, 3.383, 3.339, 3.357],
                   [6.194, 6.180, 6.167, 6.198, 6.221, 6.153],
                   [6.180, 6.223, 6.221, 6.226, 6.245, 6.156],
                   [6.184, 6.169, 6.202, 6.233, 6.236, 6.222],
                   [11.972, 11.890, 11.900, 11.949, 11.940, 11.894],
                   [11.852, 12.083, 11.992, 11.931, 11.943, 11.890],
                   [12.159, 12.248, 11.980, 11.901, 11.932, 11.902],
                   [11.904, 12.194, 12.263, 12.031, 12.141, 12.209],
                   [12.225, 12.189, 12.263, 12.170, 11.886, 11.845],
                   [24.041, 24.040, 23.992, 23.806, 23.885, 23.890],
                   [24.032, 24.429, 24.099, 23.852, 23.394, 24.433],
                   [23.449, 24.664, 23.327, 24.351, 24.291, 24.180],
                   [25.091, 24.774, 24.812, 24.471, 23.421, 24.798],
                   [24.209, 25.192, 24.783, 24.598, 24.297, 23.922],
                   [24.302, 24.593, 24.949, 24.998, 25.140, 23.587],
                   [5.970, 6.025, 6.037, 6.226, 6.325, 6.157],
                   [1.472, 1.502, 1.466, 1.630, 1.444, 1.471],
                   [0.903, 0.819, 0.793, 0.810, 0.793, 0.818],
                   [0.819, 0.816, 0.865, 0.838, 0.861, 0.838],
                   [0.699, 0.716, 0.759, 0.734, 0.719, 0.756],
                   [0.746, 0.733, 0.789, 0.753, 0.755, 0.735],
                   [0.836, 0.827, 0.851, 0.880, 0.839, 0.889]])

# [2020-08-17] [9335982] | Stores m_cut in Triangle during adjustEdges
times9 = np.array([[2.084, 2.079, 2.048],
                   [3.379, 3.409, 3.406],
                   [6.288, 6.270, 6.265],
                   [6.279, 6.261, 6.266],
                   [6.337, 6.297, 6.264],
                   [11.937, 11.990, 12.002],
                   [12.050, 12.065, 12.060],
                   [12.359, 12.384, 12.140],
                   [12.116, 12.290, 12.377],
                   [12.348, 12.326, 12.396],
                   [24.186, 24.292, 23.852],
                   [24.864, 24.345, 24.591],
                   [24.706, 24.893, 24.424],
                   [25.273, 25.010, 23.753],
                   [25.497, 25.392, 25.038],
                   [25.303, 25.636, 24.019],
                   [6.304, 6.030, 5.928],
                   [1.453, 1.456, 1.454],
                   [0.802, 0.798, 0.845],
                   [0.867, 0.814, 0.866],
                   [0.723, 0.731, 0.728],
                   [0.754, 0.805, 0.743],
                   [0.876, 0.875, 0.882]])

# [2020-08-14] [5364cda] | Uses better move and forwarding in constructor
times10 = np.array([[2.529, 2.514, 2.511],
                    [3.938, 3.929, 3.930],
                    [7.048, 7.055, 7.005],
                    [6.995, 7.042, 7.044],
                    [7.052, 7.043, 7.043],
                    [13.191, 13.298, 13.381],
                    [13.284, 13.169, 13.371],
                    [13.545, 13.453, 13.572],
                    [13.638, 13.479, 13.569],
                    [13.888, 13.739, 13.723],
                    [25.906, 26.668, 26.348],
                    [26.626, 26.573, 26.925],
                    [26.623, 26.976, 26.180],
                    [26.571, 27.621, 27.163],
                    [27.599, 27.434, 26.880],
                    [27.486, 28.192, 27.717],
                    [7.265, 7.135, 7.178],
                    [1.875, 1.914, 1.920],
                    [1.271, 1.149, 1.151],
                    [1.172, 1.163, 1.160],
                    [0.981, 0.968, 0.977],
                    [1.041, 1.081, 1.037],
                    [1.156, 1.142, 1.142]])

# [2020-08-13] [8604a8d] | Removes m_edges vector ref from MeshClipper::Triangle
times11 = np.array([[2.878, 2.904, 2.873],
                    [4.695, 4.722, 4.671],
                    [8.405, 8.476, 8.352],
                    [8.486, 8.433, 8.455],
                    [8.392, 8.409, 8.401],
                    [16.052, 16.100, 16.185],
                    [16.099, 16.109, 16.513],
                    [16.733, 16.679, 16.701],
                    [16.537, 16.293, 16.539],
                    [16.756, 16.489, 16.642],
                    [32.507, 32.712, 32.574],
                    [33.082, 33.099, 32.935],
                    [33.044, 33.154, 34.050],
                    [33.705, 33.281, 33.695],
                    [33.862, 34.555, 33.798],
                    [34.905, 33.895, 34.532],
                    [8.534, 8.576, 8.468],
                    [2.186, 2.092, 2.093],
                    [1.252, 1.204, 1.229],
                    [1.285, 1.217, 1.184],
                    [1.000, 1.004, 1.083],
                    [1.057, 1.135, 1.075],
                    [1.247, 1.174, 1.171]])

# [2020-08-13] [7a3d80e] | Uses move construction for MeshClipper::Edge
times12 = np.array([[2.931, 2.951, 2.879],
                    [4.747, 4.741, 4.691],
                    [8.747, 8.553, 8.586],
                    [8.601, 8.550, 8.588],
                    [8.632, 8.593, 8.549],
                    [16.328, 16.395, 16.182],
                    [16.339, 16.382, 16.236],
                    [16.481, 16.159, 16.532],
                    [16.667, 16.931, 16.183],
                    [16.906, 16.763, 16.950],
                    [32.889, 32.851, 33.043],
                    [32.779, 33.103, 33.217],
                    [33.587, 33.599, 33.346],
                    [33.179, 32.598, 33.981],
                    [35.165, 34.529, 34.113],
                    [34.323, 34.336, 34.322],
                    [8.622, 8.799, 8.678],
                    [2.267, 2.185, 2.264],
                    [1.231, 1.295, 1.187],
                    [1.239, 1.227, 1.303],
                    [1.030, 1.025, 1.022],
                    [1.063, 1.064, 1.065],
                    [1.180, 1.133, 1.135]])

# [2020-08-13] [3cb1ea4] | Removes m_points from MeshClipper::Edge class
times13 = np.array([[3.337, 3.316, 3.254],
                    [5.691, 5.398, 5.388],
                    [9.962, 9.956, 9.876],
                    [9.975, 9.878, 9.801],
                    [9.859, 9.985, 9.904],
                    [19.056, 19.145, 19.495],
                    [20.040, 19.776, 19.528],
                    [19.837, 19.820, 19.645],
                    [19.651, 19.916, 19.845],
                    [19.964, 19.649, 19.747],
                    [38.890, 39.202, 39.517],
                    [39.300, 40.188, 40.352],
                    [39.751, 40.224, 39.182],
                    [39.234, 40.573, 39.331],
                    [40.055, 39.667, 39.818],
                    [40.226, 40.867, 40.244],
                    [9.933, 10.052, 10.307],
                    [2.312, 2.373, 2.435],
                    [1.190, 1.235, 1.265],
                    [1.272, 1.291, 1.225],
                    [1.216, 1.158, 1.230],
                    [1.298, 1.206, 1.286],
                    [1.477, 1.462, 1.412]])

# [2020-08-13] [de74013] | Removes m_visible from MeshClipper::Edge class
times14 = np.array([[3.299, 3.322, 3.325, 3.312, 3.304, 3.577],
                    [5.578, 5.715, 6.006, 5.437, 5.869, 5.500],
                    [10.204, 10.144, 10.084, 10.104, 10.083, 10.154],
                    [10.079, 10.055, 10.101, 10.052, 9.953, 10.256],
                    [10.005, 10.204, 10.049, 9.953, 10.050, 10.094],
                    [19.693, 19.729, 20.248, 20.020, 20.297, 20.187],
                    [20.047, 19.229, 20.422, 20.076, 20.325, 19.401],
                    [20.205, 19.961, 19.987, 20.562, 20.147, 19.957],
                    [20.090, 20.244, 20.201, 20.547, 19.212, 20.825],
                    [19.141, 20.542, 20.789, 21.168, 20.231, 20.250],
                    [38.680, 40.608, 39.693, 39.761, 40.273, 39.985],
                    [40.327, 39.630, 40.720, 41.076, 40.579, 39.977],
                    [40.687, 41.624, 41.024, 39.998, 41.667, 41.085],
                    [39.495, 41.151, 41.579, 40.500, 40.290, 41.127],
                    [41.163, 40.843, 40.822, 41.576, 41.551, 41.064],
                    [41.051, 41.728, 41.054, 41.616, 41.707, 40.415],
                    [10.104, 10.172, 10.125, 10.706, 10.505, 10.210],
                    [2.359, 2.456, 2.424, 2.474, 2.440, 2.284],
                    [1.300, 1.260, 1.299, 1.287, 1.238, 1.273],
                    [1.220, 1.216, 1.274, 1.217, 1.227, 1.294],
                    [1.168, 1.186, 1.183, 1.223, 1.221, 1.175],
                    [1.220, 1.217, 1.242, 1.294, 1.219, 1.216],
                    [1.424, 1.425, 1.457, 1.426, 1.471, 1.419]])

# [2020-08-11] [758980d] | Lifts m_visible out of Point class
times15 = np.array([[3.428, 3.456, 3.379],
                    [5.748, 5.646, 5.693],
                    [10.575, 10.682, 10.463],
                    [10.723, 10.561, 10.458],
                    [10.564, 10.504, 10.569],
                    [20.212, 19.933, 20.295],
                    [20.259, 20.216, 20.007],
                    [20.163, 20.049, 20.230],
                    [20.434, 20.401, 20.200],
                    [20.225, 20.501, 19.901],
                    [39.551, 39.919, 40.487],
                    [40.149, 41.389, 41.020],
                    [41.153, 40.804, 41.386],
                    [40.945, 41.625, 40.291],
                    [41.204, 41.530, 42.004],
                    [42.088, 41.668, 42.185],
                    [10.570, 10.629, 10.639],
                    [2.571, 2.515, 2.388],
                    [1.323, 1.250, 1.329],
                    [1.308, 1.230, 1.324],
                    [1.133, 1.163, 1.249],
                    [1.234, 1.252, 1.232],
                    [1.449, 1.433, 1.493]])

# [2020-08-11] [8f4bfcf] | Computes normal on demand instead of storing it
times16 = np.array([[3.477, 3.481, 3.470],
                    [5.746, 5.776, 5.994],
                    [10.726, 10.665, 10.611],
                    [10.480, 10.657, 10.570],
                    [10.601, 10.495, 10.704],
                    [20.734, 20.243, 20.604],
                    [20.413, 20.302, 20.304],
                    [20.355, 20.500, 20.714],
                    [21.035, 20.852, 21.098],
                    [20.973, 20.848, 21.354],
                    [41.460, 41.873, 41.189],
                    [41.260, 42.016, 42.360],
                    [41.064, 41.992, 41.382],
                    [41.534, 41.760, 42.146],
                    [43.011, 43.875, 42.153],
                    [43.204, 42.664, 43.273],
                    [10.702, 10.853, 10.684],
                    [2.442, 2.459, 2.416],
                    [1.316, 1.311, 1.307],
                    [1.382, 1.332, 1.379],
                    [1.148, 1.140, 1.190],
                    [1.271, 1.236, 1.234],
                    [1.499, 1.483, 1.444]])

# [2020-08-11] [b96e220] | Removes m_normals from Mesh and MeshClipper classes
times17= np.array([[3.495, 3.542, 3.466],
                   [5.857, 5.996, 5.924],
                   [10.850, 10.868, 10.816],
                   [11.030, 10.869, 10.900],
                   [10.809, 10.592, 10.873],
                   [20.970, 21.204, 21.846],
                   [21.640, 21.654, 21.821],
                   [21.110, 21.487, 21.449],
                   [22.072, 21.476, 21.330],
                   [21.949, 21.242, 21.489],
                   [42.493, 42.207, 42.500],
                   [46.033, 44.296, 43.749],
                   [45.467, 44.609, 44.374],
                   [45.007, 45.273, 44.641],
                   [45.581, 45.678, 44.910],
                   [45.923, 48.076, 46.245],
                   [11.470, 11.298, 10.993],
                   [2.609, 2.630, 2.693],
                   [1.341, 1.342, 1.538],
                   [1.274, 1.382, 1.386],
                   [1.172, 1.178, 1.224],
                   [1.283, 1.286, 1.320],
                   [1.607, 1.511, 1.518]])

# [2020-08-11] [0509bdf] | Removes m_distance meta data from Point class
times18 = np.array([[3.735, 3.537, 3.640],
                    [6.222, 5.995, 6.148],
                    [11.356, 11.031, 11.294],
                    [11.161, 11.377, 11.564],
                    [11.409, 11.381, 11.346],
                    [22.104, 22.161, 22.107],
                    [21.860, 22.466, 22.310],
                    [22.147, 22.488, 22.160],
                    [22.365, 22.580, 22.411],
                    [22.604, 23.008, 22.621],
                    [44.268, 44.151, 44.819],
                    [44.066, 44.524, 44.806],
                    [43.739, 44.825, 44.445],
                    [43.927, 43.932, 45.393],
                    [45.692, 45.701, 45.154],
                    [45.898, 45.664, 46.161],
                    [11.672, 11.790, 11.455],
                    [2.539, 2.445, 2.530],
                    [1.351, 1.406, 1.318],
                    [1.394, 1.405, 1.405],
                    [1.142, 1.133, 1.120],
                    [1.237, 1.302, 1.227],
                    [1.432, 1.403, 1.402]])

# [2020-08-11] [12f66e9] | Moves m_integrity meta out of Triangle class
times19 = np.array([[3.694, 3.685, 3.685],
                    [6.263, 6.073, 6.078],
                    [11.475, 11.425, 11.627],
                    [11.482, 11.578, 11.680],
                    [11.480, 11.501, 11.578],
                    [22.214, 23.022, 22.318],
                    [22.917, 23.251, 22.211],
                    [23.167, 22.740, 22.868],
                    [23.028, 22.688, 22.848],
                    [22.803, 22.734, 22.724],
                    [44.491, 44.610, 45.207],
                    [44.940, 45.513, 46.124],
                    [47.337, 45.526, 44.982],
                    [45.459, 45.841, 45.305],
                    [45.778, 45.731, 46.016],
                    [45.781, 46.245, 46.928],
                    [11.471, 11.333, 11.274],
                    [2.591, 2.426, 2.555],
                    [1.312, 1.341, 1.484],
                    [1.315, 1.334, 1.256],
                    [1.159, 1.181, 1.121],
                    [1.245, 1.253, 1.323],
                    [1.389, 1.414, 1.431]])

# [2020-08-11] [abf2c0c] | Moves m_occurs meta out of MeshClipper::Point class
times20 = np.array([[3.823, 3.731, 4.091],
                    [6.543, 6.651, 6.602],
                    [12.241, 11.982, 12.314],
                    [12.026, 12.088, 12.281],
                    [12.279, 11.923, 12.180],
                    [23.577, 22.915, 23.223],
                    [23.629, 24.023, 23.417],
                    [24.589, 23.475, 24.344],
                    [23.207, 24.136, 23.231],
                    [24.232, 24.153, 24.330],
                    [48.181, 47.338, 47.191],
                    [47.676, 47.759, 48.514],
                    [46.900, 48.049, 47.668],
                    [48.344, 48.299, 48.530],
                    [48.246, 47.818, 48.570],
                    [49.041, 48.925, 48.702],
                    [12.195, 12.079, 11.453],
                    [2.599, 2.559, 2.559],
                    [1.331, 1.380, 1.414],
                    [1.388, 1.453, 1.430],
                    [1.178, 1.224, 1.157],
                    [1.385, 1.242, 1.285],
                    [1.420, 1.416, 1.387]])

# [2020-08-11] [673c8f6] | Moves meta data out of Point class
times21 = np.array([[3.947, 3.842, 3.833],
                    [6.617, 6.855, 6.904],
                    [12.590, 12.425, 12.130],
                    [12.332, 12.522, 12.740],
                    [12.382, 12.519, 12.377],
                    [24.088, 24.098, 24.271],
                    [24.336, 24.264, 24.022],
                    [24.373, 24.121, 23.920],
                    [24.276, 24.417, 24.431],
                    [24.644, 24.824, 24.371],
                    [48.276, 49.342, 49.219],
                    [48.435, 49.062, 48.675],
                    [49.094, 49.168, 48.557],
                    [48.834, 49.179, 48.951],
                    [49.693, 48.880, 48.470],
                    [49.451, 49.489, 49.903],
                    [12.545, 12.120, 12.857],
                    [2.871, 2.884, 2.607],
                    [1.379, 1.368, 1.396],
                    [1.347, 1.356, 1.288],
                    [1.172, 1.174, 1.171],
                    [1.268, 1.287, 1.308],
                    [1.398, 1.498, 1.425]])

# [2020-08-09] [acd7bca] | Avoids needless calls to softMaxHeight()
times22 = np.array([[3.997, 4.083, 4.089],
                    [6.955, 6.898, 6.993],
                    [13.321, 13.277, 13.009],
                    [13.294, 12.929, 14.111],
                    [13.022, 13.215, 13.240],
                    [25.371, 25.543, 25.835],
                    [26.133, 25.832, 26.045],
                    [26.136, 26.866, 26.135],
                    [26.041, 26.036, 26.134],
                    [26.096, 26.326, 26.515],
                    [52.050, 51.442, 52.494],
                    [51.845, 51.765, 52.533],
                    [51.751, 51.139, 52.336],
                    [52.323, 51.337, 52.034],
                    [51.285, 51.294, 52.750],
                    [52.130, 51.597, 52.269],
                    [12.654, 12.626, 13.561],
                    [2.894, 2.766, 2.878],
                    [1.412, 1.403, 1.423],
                    [1.416, 1.374, 1.417],
                    [1.264, 1.167, 1.166],
                    [1.247, 1.286, 1.331],
                    [1.403, 1.412, 1.446]])

# [2020-08-07] [a6a3100] | Allocates more space for MeshClipper data
times23 = np.array([[4.040, 4.090, 4.184],
                    [7.088, 7.332, 6.911],
                    [13.187, 13.128, 13.493],
                    [13.303, 13.205, 13.307],
                    [13.094, 13.161, 13.505],
                    [26.048, 26.357, 25.832],
                    [25.239, 25.937, 25.419],
                    [26.585, 26.344, 26.153],
                    [26.405, 25.871, 26.282],
                    [26.276, 25.940, 26.224],
                    [51.786, 51.275, 51.571],
                    [52.116, 51.581, 51.941],
                    [52.312, 52.031, 52.855],
                    [52.416, 51.789, 53.291],
                    [52.588, 52.216, 52.319],
                    [52.220, 53.634, 52.733],
                    [13.195, 12.816, 13.577],
                    [2.930, 2.739, 2.870],
                    [1.387, 1.393, 1.346],
                    [1.391, 1.415, 1.421],
                    [1.183, 1.163, 1.182],
                    [1.272, 1.277, 1.277],
                    [1.464, 1.454, 1.497]])

# [2020-08-07] [59a1673] | Removes unused corner from MeshClipper::Triangle
times24 = np.array([[5.556, 5.491],
                    [10.131, 10.470],
                    [19.125, 19.091],
                    [19.125, 19.350],
                    [19.164, 19.106],
                    [37.594, 37.484],
                    [38.116, 37.490],
                    [38.111, 38.319],
                    [38.200, 37.998],
                    [37.723, 38.300],
                    [60.0+16.616, 60.0+15.476],
                    [60.0+15.326, 60.0+16.275],
                    [60.0+16.660, 60.0+16.509],
                    [60.0+16.568, 60.0+17.563],
                    [60.0+17.254, 60.0+16.126],
                    [60.0+18.085, 60.0+16.615],
                    [18.635, 18.377],
                    [3.900, 3.827],
                    [1.631, 1.586],
                    [1.468, 1.445],
                    [1.347, 1.382],
                    [1.370, 1.377],
                    [1.559, 1.532]])

# [2020-08-07] [91a1fb5] | Optimizes constructor
times25 = np.array([[5.613, 5.549],
                    [10.099, 10.019],
                    [19.575, 19.423],
                    [19.522, 19.214],
                    [19.067, 19.356],
                    [38.045, 38.588],
                    [38.990, 38.988],
                    [39.033, 38.790],
                    [39.413, 39.176],
                    [39.694, 38.739],
                    [60.0+17.173, 60.0+17.768],
                    [60.0+18.727, 60.0+17.312],
                    [60.0+19.278, 60.0+17.346],
                    [60.0+17.824, 60.0+19.691],
                    [60.0+17.663, 60.0+17.930],
                    [60.0+19.393, 60.0+17.030],
                    [19.199, 18.801],
                    [3.873, 3.941],
                    [1.597, 1.649],
                    [1.559, 1.535],
                    [1.347, 1.327],
                    [1.361, 1.361],
                    [1.503, 1.567]])

# [2020-08-06] [819f62c] | Removes removeNonTriangularTriangles()
times26 = np.array([[5.915, 5.795],
                    [10.779, 10.623],
                    [20.207, 20.413],
                    [20.393, 20.189],
                    [20.287, 20.312],
                    [40.133, 39.793],
                    [39.819, 39.815],
                    [40.610, 40.918],
                    [40.364, 40.761],
                    [40.350, 40.921],
                    [60.0+20.987, 60.0+20.079],
                    [60.0+21.276, 60.0+21.369],
                    [60.0+20.669, 60.0+21.156],
                    [60.0+20.591, 60.0+21.882],
                    [60.0+20.371, 60.0+22.106],
                    [60.0+22.116, 60.0+22.927],
                    [19.719, 19.542],
                    [3.879, 4.085],
                    [1.492, 1.649],
                    [1.673, 1.504],
                    [1.428, 1.313],
                    [1.454, 1.362],
                    [1.572, 1.616]])

# [2020-07-13] [96566d2] | Binary search through model's height
times27 = np.array([[8.612, 8.580],
                    [16.197, 16.384],
                    [31.275, 31.269],
                    [31.025, 31.472],
                    [31.320, 31.284],
                    [60.0+2.911, 60.0+2.542],
                    [60.0+2.984, 60.0+3.655],
                    [60.0+3.092, 60.0+4.197],
                    [60.0+3.408, 60.0+4.389],
                    [60.0+3.925, 60.0+4.282],
                    [120.0+7.492, 120.0+8.297],
                    [120.0+7.806, 120.0+7.802],
                    [120.0+8.551, 120.0+8.276],
                    [120.0+7.699, 120.0+9.293],
                    [120.0+9.855, 120.0+10.537],
                    [120.0+9.856, 120.0+10.452],
                    [31.125, 31.480],
                    [5.913, 5.892],
                    [1.976, 2.042],
                    [2.030, 1.841],
                    [1.695, 1.643],
                    [1.795, 1.785],
                    [1.725, 1.766]])

# [2020-07-13] [7b18359] | Makes linc multithreaded
times28 = np.array([[6.690, 7.381],
                    [12.056, 12.029],
                    [17.430, 17.599],
                    [23.587, 24.228],
                    [28.730, 28.625],
                    [34.158, 34.223],
                    [39.919, 39.736],
                    [45.310, 45.410],
                    [50.866, 51.168],
                    [56.806, 57.130],
                    [60.0+2.976, 60.0+3.490],
                    [60.0+9.051, 60.0+9.002],
                    [60.0+15.053, 60.0+15.007],
                    [60.0+20.853, 60.0+21.295],
                    [60.0+27.642, 60.0+27.621],
                    [60.0+32.085, 60.0+31.942],
                    [45.049, 44.731],
                    [45.205, 45.085],
                    [46.087, 45.677],
                    [46.482, 46.581],
                    [47.225, 47.141],
                    [49.327, 49.016],
                    [29.378, 29.091]])

# [2020-07-11] [3b8bfce] | Utilizes bounding planes to optimize
times29 = np.array([[13.822, 13.785],
                    [26.242, 26.117],
                    [38.866, 38.437],
                    [51.094, 51.149],
                    [60.0+3.551, 60.0+3.513],
                    [60.0+17.441, 60.0+15.918],
                    [60.0+28.532, 60.0+29.301],
                    [60.0+42.352, 60.0+41.368],
                    [60.0+53.685, 60.0+55.926],
                    [120.0+6.515, 120.0+6.317],
                    [120.0+19.447, 120.0+19.926],
                    [120.0+30.993, 120.0+31.755],
                    [120.0+43.976, 120.0+44.033],
                    [120.0+56.157, 120.0+57.740],
                    [180.0+15.252, 180.0+14.414],
                    [180.0+23.875, 180.0+23.175],
                    [60.0+39.158, 60.0+38.656],
                    [60.0+40.412, 60.0+40.579],
                    [60.0+40.586, 60.0+41.666],
                    [60.0+42.579, 60.0+42.351],
                    [60.0+44.155, 60.0+44.864],
                    [60.0+49.412, 60.0+50.187],
                    [60.0+4.763, 60.0+4.285]])

# [2020-07-10] [0717ae4] | Starts an implementations of bounding volumes
times30 = np.array([[11*60.0 + 50.682],
                    [23*60.0 + 40.493],
                    [35*60.0 + 56.379],
                    [47*60.0 + 20.923],
                    [59*60.0 + 6.881],
                    [71*60.0 + 46.294],
                    [84*60.0 + 20.638],
                    [96*60.0 + 47.576],
                    [109*60.0 + 11.045]])

fig, ax = plt.subplots()
def plot_means():
  ax.plot(scales[0:len(times30)], np.mean(times30,1), 'o-')
  ax.plot(scales, np.mean(times29,1), 'o-')
  ax.plot(scales, np.mean(times28,1), 'o-')
  ax.plot(scales, np.mean(times27,1), 'o-')
  ax.plot(scales, np.mean(times26,1), 'o-')
  ax.plot(scales, np.mean(times25,1), 'o-')
  ax.plot(scales, np.mean(times24,1), 'o-')
  ax.plot(scales, np.mean(times23,1), 'o-')
  ax.plot(scales, np.mean(times22,1), 'o-')
  ax.plot(scales, np.mean(times21,1), 'o-')
  ax.plot(scales, np.mean(times20,1), 'o-')
  ax.plot(scales, np.mean(times19,1), 'o-')
  ax.plot(scales, np.mean(times18,1), 'o-')
  ax.plot(scales, np.mean(times17,1), 'o-')
  ax.plot(scales, np.mean(times16,1), 'o-')
  ax.plot(scales, np.mean(times15,1), 'o-')
  ax.plot(scales, np.mean(times14,1), 'o-')
  ax.plot(scales, np.mean(times13,1), 'o-')
  ax.plot(scales, np.mean(times12,1), 'o-')
  ax.plot(scales, np.mean(times11,1), 'o-')
  ax.plot(scales, np.mean(times10,1), 'o-')
  ax.plot(scales, np.mean(times9,1), 'o-')
  ax.plot(scales, np.mean(times8,1), 'o-')
  ax.plot(scales, np.mean(times7,1), 'o-')
  ax.plot(scales, np.mean(times6,1), 'o-')
  ax.plot(scales, np.mean(times5,1), 'o-')
  ax.plot(scales, np.mean(times4,1), 'o-')
  ax.plot(scales, np.mean(times3,1), 'o-')
  ax.plot(scales, np.mean(times2,1), 'o-')
  ax.plot(scales, np.mean(times,1), 'o-')
  ax.set(xlabel='3DBenchy scale', ylabel='execution time (s)',
         title='Line-collision-detector Benchymark')
  #plt.grid()
  plt.yscale("log");
  plt.show()
  #plt.savefig('individual_benchits_log_.png');

plot_means()

def plot_totals():
  ax.plot(range(0, 29), [np.mean(times29, 1).sum(),
                         np.mean(times28, 1).sum(),
                         np.mean(times27, 1).sum(),
                         np.mean(times26, 1).sum(),
                         np.mean(times25, 1).sum(),
                         np.mean(times24, 1).sum(),
                         np.mean(times23, 1).sum(),
                         np.mean(times22, 1).sum(),
                         np.mean(times21, 1).sum(),
                         np.mean(times20, 1).sum(),
                         np.mean(times19, 1).sum(),
                         np.mean(times18, 1).sum(),
                         np.mean(times17, 1).sum(),
                         np.mean(times16, 1).sum(),
                         np.mean(times15, 1).sum(),
                         np.mean(times14, 1).sum(),
                         np.mean(times13, 1).sum(),
                         np.mean(times12, 1).sum(),
                         np.mean(times11, 1).sum(),
                         np.mean(times10, 1).sum(),
                         np.mean(times9, 1).sum(),
                         np.mean(times8, 1).sum(),
                         np.mean(times7, 1).sum(),
                         np.mean(times6, 1).sum(),
                         np.mean(times5, 1).sum(),
                         np.mean(times4, 1).sum(),
                         np.mean(times3, 1).sum(),
                         np.mean(times2, 1).sum(),
                         np.mean(times, 1).sum()], 'o-')
  ax.set(xlabel='Commit number', ylabel='execution time (s) logscale',
         title='Line-collision-detector Bench(y)mark')
  plt.yscale("log");
  plt.savefig('benchit_totals_log.png');
  #plt.savefig('benchit_totals.png');

#plot_totals()

#plt.show()
